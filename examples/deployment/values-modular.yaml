# Applying deployment resources requires additional permissions
rbac:
  additionalRoleRules:
    - apiGroups: ["", "extensions", "apps"]
      resources: ["deployments", "replicasets", "pods", "services"]
      verbs: ["*"]

# Setup the kubetruth CRD to ignore all projects except for the one named deploytest
# For the deploytest project, get the resource template from the cloudtruth template named deployment
projectMappings:

  # Define the root project mapping, skipping all projects except for the
  # example we care about
  root:
    scope: "root"
    environment: default
    skip: true

  # Define an override project mapping to enable processing of a single project
  # for this example.  This will also gain the default `resource_templates` for
  # generating configmap and secret resource, but if not desired, those can be
  # skipped by setting them to an empty string.  In a real world scenario you
  # would want to add the deployment templates in an override that matches
  # multiple projects in order to share its behavior across those projects
  deploytest:
    scope: "override"
    skip: false
    project_selector: "^deploytest$"
    resource_templates:
      # Uncomment below to skip the default templates, but note that you'll get
      # an error unless you remove the configmap reference from the deployment
      # template
      #
      # configmap: ""
      # secret: ""

      # The deployment template that is only applied if there is an app_name
      # parameter defined
      deployment: |
        {%- if parameters contains "app_name" %}
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: "{{ parameters.app_name }}"
          namespace: "{{ context.resource_namespace }}"
          labels:
            version: "{{ parameters.image_version }}"
            app: "{{ parameters.app_name }}"
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: "{{ parameters.app_name }}"
          template:
            metadata:
              labels:
                app: "{{ parameters.app_name }}"
                # Adding version labels here to demonstrate restart on a
                # configmap change.  An alternate method would be to make the
                # configmap name based on the hash thereby forcing the restart
                # whilst preserving the old configmap
                #
                parameters_version: "{{ parameters | sort | to_json | sha256 | slice: 0, 7 }}"
                secrets_version: "{{ secrets | sort | to_json | sha256 | slice: 0, 7 }}"
            spec:
              containers:
                - name: "{{ parameters.image_name }}"
                  image: "{{parameters.image_name}}:{{parameters.image_version}}"
                  ports:
                    - containerPort: {{parameters.app_port}}
                  envFrom:
                    - configMapRef:
                        name: "{{ context.resource_name }}"
        {%- endif %}

      # The service template that is only applied if an app_port is defined,
      # thereby indicating this is a network service that needs a port exposed
      service: |
        {%- if parameters contains "app_port" %}
        apiVersion: v1
        kind: Service
        metadata:
          name: "{{ parameters.app_name | dns_safe }}"
          namespace: "{{ context.resource_namespace }}"
        spec:
          selector:
            app: {{parameters.app_name}}
          type: NodePort
          ports:
            - protocol: TCP
              port: {{parameters.app_port}}
              targetPort: {{parameters.app_port}}
        {%- endif %}
