name: CD

on: push

env:
  CI: true
  CLOUDTRUTH_API_KEY: "${{ secrets.CLOUDTRUTH_API_KEY }}"
  CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Ruby version specified in `.ruby-version`
        uses: eregon/use-ruby-action@master # this will use by default the .ruby-version file

      - run: ruby -v
      - run: gem install --no-document bundler
      - run: bundle config path vendor/bundle
      - run: bundle install --jobs 4 --retry 3
      - run: bundle exec rspec

  deploy:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set environment from cloudtruth
        uses: cloudtruth/configure-action@v1
        with:
          token: "${{ secrets.CLOUDTRUTH_API_KEY }}"
          project: "deploy"
          environment: "production"

      - name: Install Atmos
        run: sudo gem install --no-document simplygenius-atmos

      - name: Setup Atmos
        run: |
          mkdir -p config
          echo -e "${ATMOS_YML}" > config/atmos.yml
          cat config/atmos.yml

      - name: Build the Docker image
        run: |
          docker build --target release -t kubetruth .

      - name: Push the Docker image
        run: |
          tag=${GITHUB_REF##*/v}
          echo "Pushing version '$tag' to docker hub"
          echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

          docker tag kubetruth cloudtruth/kubetruth:latest
          docker push cloudtruth/kubetruth:latest
          docker tag kubetruth cloudtruth/kubetruth:${tag}
          docker push cloudtruth/kubetruth:${tag}

      - name: Package helm chart
        run: |
          export HELM_REPO_URL="${PACKAGES_URL}/${PACKAGES_HELM_PATH}"
          mkdir -p tmp/packaged-chart/
          (cd tmp/packaged-chart && helm package ../../helm/kubetruth)
          ./bin/generate-helmv2.sh
          (cd tmp/packaged-chart && helm package ../../tmp/helmv2/kubetruth)
          maybe_merge=""
          if curl -sfL ${HELM_REPO_URL}/index.yaml -o tmp/old-index.yaml; then
            maybe_merge="--merge tmp/old-index.yaml"
          fi
          echo helm repo index ${maybe_merge} --url ${HELM_REPO_URL} tmp/packaged-chart/
          helm repo index ${maybe_merge} --url ${HELM_REPO_URL} tmp/packaged-chart/

      - name: Deploy helm chart to S3
        run: |
          atmos -e production auth_exec aws s3 sync tmp/packaged-chart/ s3://${PACKAGES_BUCKET_NAME}/${PACKAGES_HELM_PATH}/

          assets=""
          for asset in tmp/packaged-chart/*; do
            asset=${asset##*/}
            asset="/${PACKAGES_HELM_PATH}/${asset}"
            assets="${assets} ${asset}"
          done
          atmos -e production auth_exec aws cloudfront create-invalidation --distribution-id ${PACKAGES_DISTRIBUTION_ID} --paths ${assets}
